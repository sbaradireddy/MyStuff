by import msal
import requests
import boto3
import io, os

scopes = ['https://graph.microsoft.com/.default']


CLIENT_ID = xcxc
CLIENT_SECRET = xcxc
TENANT_ID = xcxc

# AWS s3 bucket details
S3_BUCKET = "pr-home-datascience"

# Set up MSAL
authority = f'https://login.microsoftonline.com/{TENANT_ID}'
#authority = f'https://login.microsoftonline.com/common/{TENANT_ID}'
app = msal.ConfidentialClientApplication(CLIENT_ID, authority=authority, client_credential=CLIENT_SECRET)


# Authenticate and get token
result = app.acquire_token_for_client(scopes=scopes)
access_token = result['access_token']

graph_url = 'https://graph.microsoft.com/v1.0/users/HomeDSAWS@plymouthrock.com/mailFolders/inbox/messages?$filter=hasAttachments eq true'

headers = {
    'Authorization': f'Bearer {access_token}','Accept': 'application/json'
}
s3 = boto3.client('s3')

# Retrieve emails
response = requests.get(graph_url, headers=headers)
emails_with_attachments = response.json().get('value', [])
#print(emails_with_attachments)
for email in emails_with_attachments:
    email_id = email['id']
    folder_name = email_id.split('-')[2].rstrip('/')+'/'
    try:
        response = s3.list_objects_v2(Bucket=S3_BUCKET, Prefix=folder_name, Delimiter='/')
        if 'Contents' in response or 'CommonPrefixes' in response:
            print('Email already exists in bucket')
            continue
        else:
            s3.put_object(Bucket=S3_BUCKET, Key=folder_name)
            print(f"Folder {folder_name} created in Bucket")
            email_content = email['subject'] + email['body']['content']
            # create a txt file with email subject and body
            filename = 'body.HTML'
           
            with open(filename, 'w') as file:
                file.write(email_content)
            s3_key = f"{folder_name}{filename}"
            s3.upload_file(filename, S3_BUCKET, s3_key)
            print(f"Uploaded email content as {filename} to S3")
    except Exception as e:
        print('An error occured', e)
    
    attachments_url = f'https://graph.microsoft.com/v1.0/users/HomeDSAWS@plymouthrock.com/messages/{email_id}/attachments'
    response1 = requests.get(attachments_url, headers=headers)
    attachments = response1.json().get('value', [])
    for attachment in attachments:
        if '@odata.type' in attachment and attachment['@odata.type'] == '#microsoft.graph.fileAttachment':
            attachment_content = attachment['contentBytes']
            attachment_name = attachment['name']
            s3_key = f"{folder_name}{attachment_name}"
            with open(attachment_name, 'wb') as f:
                f.write(attachment_content.encode('utf-8'))

            # Upload to S3
            with open(attachment_name, 'rb') as f:
                s3.upload_fileobj(f, S3_BUCKET, s3_key)
            print(f"Uploaded {attachment_name} to S3")
            
    

        ###############


Response
{
  "errorMessage": "Handler 'lambda_handler' missing on module 'lambda_function'",
  "errorType": "Runtime.HandlerNotFound",
  "requestId": "",
  "stackTrace": []
}

Function Logs
[ERROR] Runtime.HandlerNotFound: Handler 'lambda_handler' missing on module 'lambda_function'
Traceback (most recent call last):INIT_REPORT Init Duration: 1349.56 ms	Phase: init	Status: error	Error Type: Runtime.Unknown
[ERROR] Runtime.HandlerNotFound: Handler 'lambda_handler' missing on module 'lambda_function'
Traceback (most recent call last):INIT_REPORT Init Duration: 8387.28 ms	Phase: invoke	Status: error	Error Type: Runtime.Unknown
START RequestId: abae3862-aaf7-404e-ac1a-8bc8cccd3fd9 Version: $LATEST
Unknown application error occurred
Runtime.Unknown
END RequestId: abae3862-aaf7-404e-ac1a-8bc8cccd3fd9
REPORT RequestId: abae3862-aaf7-404e-ac1a-8bc8cccd3fd9	Duration: 8387.99 ms	Billed Duration: 8388 ms	Memory Size: 128 MB	Max Memory Used: 39 MB

Request ID
abae3862-aaf7-404e-ac1a-8bc8cccd3fd9#########################





import msal
import requests
import boto3
import base64
import io, os

def lambda_handler(event, context):
    scopes = ['https://graph.microsoft.com/.default']
    CLIENT_ID = 'your_client_id'
    CLIENT_SECRET = 'your_client_secret'
    TENANT_ID = 'your_tenant_id'
    S3_BUCKET = "your_s3_bucket"

    authority = f'https://login.microsoftonline.com/{TENANT_ID}'
    app = msal.ConfidentialClientApplication(CLIENT_ID, authority=authority, client_credential=CLIENT_SECRET)

    result = app.acquire_token_for_client(scopes=scopes)
    access_token = result.get('access_token')
    if not access_token:
        return {
            'statusCode': 500,
            'body': 'Failed to get token'
        }

    graph_url = 'https://graph.microsoft.com/v1.0/users/your_user/mailFolders/inbox/messages?$filter=hasAttachments eq true'
    headers = {
        'Authorization': f'Bearer {access_token}', 'Accept': 'application/json'
    }
    s3 = boto3.client('s3')
    
    response = requests.get(graph_url, headers=headers)
    emails_with_attachments = response.json().get('value', [])

    # Rest of your logic to handle emails and S3 uploads
    return {
        'statusCode': 200,
        'body': 'Success'
    }


#################################
Test Event Name
test

Response
{
  "errorMessage": "Syntax error in module 'lambda_function': expected an indented block (lambda_function.py, line 10)",
  "errorType": "Runtime.UserCodeSyntaxError",
  "requestId": "",
  "stackTrace": [
    "  File \"/var/task/lambda_function.py\" Line 10\n    scopes = ['https://graph.microsoft.com/.default']\n"
  ]
}

Function Logs
[ERROR] Runtime.UserCodeSyntaxError: Syntax error in module 'lambda_function': expected an indented block (lambda_function.py, line 10)
Traceback (most recent call last):
  File "/var/task/lambda_function.py" Line 10
    scopes = ['https://graph.microsoft.com/.default']INIT_REPORT Init Duration: 130.68 ms	Phase: init	Status: error	Error Type: Runtime.Unknown
[ERROR] Runtime.UserCodeSyntaxError: Syntax error in module 'lambda_function': expected an indented block (lambda_function.py, line 10)
Traceback (most recent call last):
  File "/var/task/lambda_function.py" Line 10
    scopes = ['https://graph.microsoft.com/.default']INIT_REPORT Init Duration: 1328.56 ms	Phase: invoke	Status: error	Error Type: Runtime.Unknown
START RequestId: 85305bf8-90ab-44da-ba58-63d4fad8838e Version: $LATEST
Unknown application error occurred
Runtime.Unknown
END RequestId: 85305bf8-90ab-44da-ba58-63d4fad8838e
REPORT RequestId: 85305bf8-90ab-44da-ba58-63d4fad8838e	Duration: 1368.36 ms	Billed Duration: 1369 ms	Memory Size: 128 MB	Max Memory Used: 11 MB

Request ID
85305bf8-90ab-44da-ba58-63d4fad8838e
