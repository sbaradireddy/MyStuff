with SQ_V_CLM_TXN_FACT as (
        SELECT row_number() over(order by V_CLM_TXN_FACT.CLM_NUM) AS source_reference_id,
               V_CLM_TXN_FACT.SRC_TXN_DATA_ID,
               V_CLM_TXN_FACT.SRC_TXN_RSV_ID,
               V_CLM_TXN_FACT.SRC_TXN_SEQ_NUM,
               V_CLM_TXN_FACT.CLM_NUM as CLM_NUM1 ,
               V_CLM_TXN_FACT.TXN_TYP,
               V_CLM_TXN_FACT.RSV_TYP,
               V_CLM_TXN_FACT.RLTD_CLM_NUM,
               V_CLM_TXN_FACT.LOSS_EXP_PD_NET_SS_AMT,
               V_CLM_TXN_FACT.RSV_LOSS_MF_CD,
               V_CLM_TXN_FACT.CO_CD,
               V_CLM_TXN_FACT.RSV_LOSS_TYP_ABVN,
               V_CLM_TXN_FACT.CLM_TXN_PK,
               V_CLM_TXN_FACT.CWS_CVG_CD,
               V_CLM_TXN_FACT.POL_NUM,
               V_CLM_TXN_FACT.CWS_CVG_TYP,
               V_CLM_CVG_DIM_HST.CLM_CVG_PK,
               V_CLM_RSV_DIM_HST.MNTRY_CTGY,
               V_CLM_DIM_HST.LOSS_DT,
               V_CLM_DIM_HST.LOSS_STATE,
               V_CLM_ROLE_DIM_HST.CLMNT_NUM,
               V_CLM_ROLE_DIM_HST.CHS_CLMNT_NUM
          FROM CDWDEV.DWADMN.V_CLM_RSV_DIM_HST,
              CDWDEV.DWADMN. V_CLM_CVG_DIM_HST,
              CDWDEV.DWADMN. V_CLM_DIM_HST,
              CDWDEV.DWADMN. V_CLM_ROLE_DIM_HST,
               CDWDEV.DWADMN.V_CLM_TXN_FACT
         WHERE  V_CLM_CVG_DIM_HST.CLM_CVG_PK=V_CLM_TXN_FACT.CLM_CVG_PK
           AND V_CLM_CVG_DIM_HST.CLM_PK=V_CLM_CVG_DIM_HST.CLM_CVG_PK
           AND V_CLM_DIM_HST.CLM_PK=V_CLM_TXN_FACT.CLM_PK
           AND V_CLM_TXN_FACT.CLM_PK=V_CLM_CVG_DIM_HST.CLM_CVG_PK
           AND V_CLM_TXN_FACT.CLM_ROLE_PK=V_CLM_ROLE_DIM_HST.CLM_ROLE_PK
           AND V_CLM_TXN_FACT.CLM_CVG_PK=V_CLM_CVG_DIM_HST.CLM_CVG_PK
           AND V_CLM_TXN_FACT.CLM_RSV_PK=V_CLM_RSV_DIM_HST.CLM_RSV_PK
		 
		   AND V_CLM_TXN_FACT.CO_CD in ('PRAC','MWAC','ALN_PRAC','ALN_MWAC')
           and V_CLM_RSV_DIM_HST.CO_CD in ('PRAC','MWAC','ALN_PRAC','ALN_MWAC')
           and V_CLM_ROLE_DIM_HST.CO_CD in ('PRAC','MWAC','ALN_PRAC','ALN_MWAC')
           and V_CLM_DIM_HST.CO_CD in ('PRAC','MWAC','ALN_PRAC','ALN_MWAC')
           and V_CLM_TXN_FACT.PROD_CD = 'PA'
           and V_CLM_RSV_DIM_HST.PROD_CD = 'PA'
           and V_CLM_ROLE_DIM_HST.PROD_CD = 'PA'
           and V_CLM_DIM_HST.PROD_CD = 'PA'
           and V_CLM_DIM_HST.STATE_CD in ('CT','NH')
           and V_CLM_TXN_FACT.ACCTG_DT >= '{{BATCH_START_DT}}'
           and V_CLM_TXN_FACT.ACCTG_DT <= '{{BATCH_END_DT}}'
           and V_CLM_TXN_FACT.LOSS_EXP_PD_NET_SS_AMT <> 0 --and V_CLM_TXN_FACT.ROW_STAT = 'C'

           and V_CLM_TXN_FACT.ROW_EFF_DT <= '{{BATCH_END_DT}}'
           and V_CLM_TXN_FACT.ROW_XPTN_DT > '{{BATCH_END_DT}}'
           and UPPER(V_CLM_TXN_FACT.CWS_CVG_CD) not in ('BIPD', 'CSL', 'BI', 'PD', 'MP','MED PAY', 'UN', 'UN/UND', 'UMSIN', 'UMSPL', 'UND/UN SINGLE', 'UND/UN SPLIT','NY PIP')
           and V_CLM_TXN_FACT.RSV_TYP not in ('Claim Expense', 'Misc Expense', 'Legal Expense','Expense Recovery')
           
       ) ,
exp_loss_field1 as (
        -- writting query for expression function
SELECT SQ_V_CLM_TXN_FACT.CWS_CVG_CD AS CWS_CVRG_CD,
               SQ_V_CLM_TXN_FACT.CWS_CVG_TYP,
               SQ_V_CLM_TXN_FACT.RSV_LOSS_MF_CD AS LOSS_MF_CD,
               SQ_V_CLM_TXN_FACT.RSV_LOSS_TYP_ABVN,
               SQ_V_CLM_TXN_FACT.MNTRY_CTGY AS MONETARY_CATEGORY_CD,
               SQ_V_CLM_TXN_FACT.LOSS_STATE AS LOSS_ST,
               SQ_V_CLM_TXN_FACT.LOSS_DT,
               SQ_V_CLM_TXN_FACT.CLMNT_NUM,
               SQ_V_CLM_TXN_FACT.CHS_CLMNT_NUM,
               SQ_V_CLM_TXN_FACT.TXN_TYP AS TRANS_ACTION_CD,
               SQ_V_CLM_TXN_FACT.RLTD_CLM_NUM,
               SQ_V_CLM_TXN_FACT.source_reference_id,
               SQ_V_CLM_TXN_FACT.CLM_NUM1 AS CLAIM_NBR,
               SQ_V_CLM_TXN_FACT.SRC_TXN_SEQ_NUM AS NK_TRANS_SEQ_NBR,
               SQ_V_CLM_TXN_FACT.LOSS_EXP_PD_NET_SS_AMT AS TRANS_AMT,
               SQ_V_CLM_TXN_FACT.CLM_TXN_PK,
               SQ_V_CLM_TXN_FACT.CLM_CVG_PK,
               SQ_V_CLM_TXN_FACT.RSV_TYP AS RESERVE_TYPE_CD,
               SQ_V_CLM_TXN_FACT.SRC_TXN_DATA_ID,
               SQ_V_CLM_TXN_FACT.SRC_TXN_RSV_ID AS NK_RESERVE_ID,
               SQ_V_CLM_TXN_FACT.POL_NUM,
               SQ_V_CLM_TXN_FACT.CO_CD,
               IFF( LOSS_MF_CD IS NULL OR LTRIM(RTRIM(LOSS_MF_CD)) = '', DECODE(LTRIM(RTRIM(RSV_LOSS_TYP_ABVN)), 'fire','01', 'thft','02', 'pers_eff','04', 'vand','05', 'earthquak','06', 'expl','06', 'hail','06', 'wind','06', 'fld_ris_wat','07', 'tow_lab','08', 'allothr','09', 'auto_thft_rent','09', 'fall_tree_obj','09', 'ppe_ded_doll','09', 'rent_reimb','09', 'riot_civil_comm','09', 'cntct_anim','11', 'glass','13', 'collsn','20', 'glass_waiver','33', 'road_assist','RD', '09'), DECODE(RTRIM(LOSS_MF_CD), 'FR','01', 'TA','02', 'GL','13', 'GLW','33', 'PE','04', 'VM','05', 'HL','06', 'EX','06', 'WN','06', 'FL','07', 'TL','08', 'CA','11', 'AO','09', 'COLL','20', 'CD','11', 'RR','09', 'AC','11', '09')) AS v_iso_type_of_loss,
               DECODE(RTRIM(CWS_CVRG_CD), 'COLL', '20', 'ALCOLL', '20', 'CUSTCOLL', '20', v_iso_type_of_loss) AS O_ISO_TYPE_OF_LOSS,       TO_DATE('{{BATCH_START_DT}}', 'YYYY-MM-DD')         AS BATCH_START_DT,TO_DATE('{{BATCH_END_DT}}', 'YYYY-MM-DD') AS BATCH_END_DT,       TO_DATE('{{BATCH_START_DT}}', 'YYYY-MM-DD')         AS RPRTG_PERIOD_START_DT,TO_DATE('{{BATCH_END_DT}}', 'YYYY-MM-DD') AS RPRTG_PERIOD_END_DT,
               IFF(RTRIM(MONETARY_CATEGORY_CD)='LOSS', '6', DECODE(RTRIM(RESERVE_TYPE_CD), 'Other Recovery', '6', 'Loss Payment Recovery', '6', 'Salvage', '4', 'Subrogation', '5')) AS ISO_NONBUR_TRANS_TYPE_CD,
               SUBSTR('{{BATCH_END_DT}}', 6,2) || SUBSTR('{{BATCH_END_DT}}',1,4) AS ISO_NONBUR_ACCTG_DATE,
               DECODE(LOSS_ST, 'AL','01', 'AK','54', 'AZ','02', 'AR','03', 'CA','04', 'CO','05', 'CT','06', 'DE','07', 'DC','08', 'FL','09', 'GA','10', 'HI','11', 'IL','12', 'IN','13', 'IA','14', 'KS','15', 'KY','16', 'LA','17', 'ME','18', 'MD','19', 'MA','20', 'MI','21', 'MN','22', 'MS','23', 'MO','24', 'MT','25', 'NE','26', 'NV','27', 'NH','28', 'NJ','29', 'NM','30', 'NY','31', 'NC','32', 'ND','33', 'OH','34', 'OK','35', 'OR','36', 'PA','37', 'PR','58', 'RI','38', 'SC','39', 'SD','40', 'TN','41', 'TX','42', 'UT','43', 'VT','44', 'VA','45', 'WA','46', 'WV','47', 'WI','48', 'WY','49', 'AB','61', 'BC','62', 'MB','63', 'NB','71', 'NL','65', 'NT','69', 'NS','72', 'ON','64', 'PE','60', 'QC','66', 'SK','67', 'YT','68') AS ISO_NONBUR_ACCDNT_ST_CD,
               TO_CHAR(LOSS_DT,'MMDDYYYY') AS ISO_NONBUR_LOSS_DATE,
               IFF(LTRIM(RTRIM(CHS_CLMNT_NUM)) <> '', LTRIM(RTRIM(CHS_CLMNT_NUM)), IFF(LTRIM(RTRIM(CLMNT_NUM)) <> '', LTRIM(RTRIM(CLMNT_NUM)), '0')) AS CLAIMANT_NBR,
               RPAD(CLAIM_NBR,15,' ') AS CLAIM_NBR_LKP,
               IFF( RLTD_CLM_NUM IS NULL or TRANS_ACTION_CD = 'ADJ OUT', CLAIM_NBR, RTRIM(RLTD_CLM_NUM)) AS O_RLTD_CLM_NUM,
               'C' AS PMT_ROW_STAT,
               IFF(RTRIM(CWS_CVG_TYP) = 'rdsd_asst' AND RTRIM(POL_NUM) = '99A09999999999', 'Y', 'N') AS BULK_PYMT_IND,
               LKP_PMT_DETAIL.PMT_ISSU_DT,
               Lkp_PAID_CLAIM_COUNT1.REPORTING_PERIOD,
               Lkp_PAID_CLAIM_COUNT1.CLAIM_COUNT
          FROM SQ_V_CLM_TXN_FACT SQ_V_CLM_TXN_FACT
          left join -- writting query for lookup function
 (
                select PMT_ISSU_DT,
                       V_CLM_PMT_RCVRY_DIM_HST.CLM_NUM  ,
                       SRC_TXN_DATA_ID,
                       ROW_STAT,
                       row_number() over(partition by V_CLM_PMT_RCVRY_DIM_HST.CLM_NUM, SRC_TXN_DATA_ID, ROW_STAT order by V_CLM_PMT_RCVRY_DIM_HST.CLM_NUM DESC,SRC_TXN_DATA_ID DESC,ROW_STAT DESC) as rn -- Please review the order by columns

                  FROM CDWDEV.DWADMN.V_CLM_PMT_RCVRY_DIM_HST
                 where CO_CD in ('PRAC','MWAC','ALN_PRAC','ALN_MWAC') qualify rn = 1
               ) LKP_PMT_DETAIL
            on LKP_PMT_DETAIL.CLM_NUM=IFF( SQ_V_CLM_TXN_FACT.RLTD_CLM_NUM IS NULL or SQ_V_CLM_TXN_FACT.TXN_TYP = 'ADJ OUT', SQ_V_CLM_TXN_FACT.CLM_NUM1, RTRIM(SQ_V_CLM_TXN_FACT.RLTD_CLM_NUM))
           AND LKP_PMT_DETAIL.SRC_TXN_DATA_ID=SQ_V_CLM_TXN_FACT.SRC_TXN_DATA_ID
           AND LKP_PMT_DETAIL.ROW_STAT='C'
          left join -- writting query for lookup function
 (
                select REPORTING_PERIOD,
                       CLAIM_COUNT,
                       CLAIM_NBR,
                       SQ_V_CLM_TXN_FACT.NK_RESERVE_ID,
                       NK_TRAN_SEQ_NBR,
                       row_number() over(partition by CLAIM_NBR, SQ_V_CLM_TXN_FACT.NK_RESERVE_ID, NK_TRAN_SEQ_NBR order by CLAIM_NBR, SQ_V_CLM_TXN_FACT.NK_RESERVE_ID, NK_TRAN_SEQ_NBR) as rn -- Please review the order by columns

                  FROM ISO_BUR_LOSS_CLAIM_COUNT_NE qualify rn = 1
               ) Lkp_PAID_CLAIM_COUNT1
            on Lkp_PAID_CLAIM_COUNT1.CLAIM_NBR=RPAD(CLAIM_NBR,15,' ')
           AND Lkp_PAID_CLAIM_COUNT1.NK_RESERVE_ID=SQ_V_CLM_TXN_FACT.SRC_TXN_RSV_ID
           AND Lkp_PAID_CLAIM_COUNT1.NK_TRAN_SEQ_NBR=SQ_V_CLM_TXN_FACT.SRC_TXN_SEQ_NUM
       ) ,
exp_loss_fields2 as (
        -- writting query for expression function
SELECT source_reference_id,
               O_ISO_TYPE_OF_LOSS AS ISO_TYPE_OF_LOSS,
               BATCH_START_DT,
               BATCH_END_DT,
               RPRTG_PERIOD_START_DT,
               RPRTG_PERIOD_END_DT,
               ISO_NONBUR_TRANS_TYPE_CD,
               ISO_NONBUR_ACCTG_DATE,
               ISO_NONBUR_ACCDNT_ST_CD,
               ISO_NONBUR_LOSS_DATE,
               CLAIM_NBR,
               CLAIMANT_NBR,
               REPORTING_PERIOD,
               CLAIM_COUNT AS ISO_NONBUR_CLAIM_COUNT,
               TRANS_AMT,
               CLM_TXN_PK,
               CLM_CVG_PK,
               RESERVE_TYPE_CD,
               PMT_ISSU_DT,
               exp_loss_field1.NK_RESERVE_ID,
               BULK_PYMT_IND,
               POL_NUM,
               CO_CD,
               SYSDATE() AS CREATED_DT
          FROM exp_loss_field1
       ) 
 , 
RTR_BULK_PYMT_PROCESSING_BULK_PYMTS as (
        SELECT exp_loss_fields2.source_reference_id,
               ISO_TYPE_OF_LOSS AS ISO_TYPE_OF_LOSS1,
               BATCH_START_DT AS BATCH_START_DT1,
               BATCH_END_DT AS BATCH_END_DT1,
               RPRTG_PERIOD_START_DT AS RPRTG_PERIOD_START_DT1,
               RPRTG_PERIOD_END_DT AS RPRTG_PERIOD_END_DT1,
               ISO_NONBUR_TRANS_TYPE_CD AS ISO_NONBUR_TRANS_TYPE_CD1,
               ISO_NONBUR_ACCTG_DATE AS ISO_NONBUR_ACCTG_DATE1,
               ISO_NONBUR_ACCDNT_ST_CD AS ISO_NONBUR_ACCDNT_ST_CD1,
               ISO_NONBUR_LOSS_DATE AS ISO_NONBUR_LOSS_DATE1,
               CLAIM_NBR AS CLAIM_NBR1,
               CLAIMANT_NBR AS CLAIMANT_NBR1,
               REPORTING_PERIOD AS REPORTING_PERIOD1,
               ISO_NONBUR_CLAIM_COUNT AS ISO_NONBUR_CLAIM_COUNT1,
               TRANS_AMT AS TRANS_AMT1,
               CREATED_DT AS CREATED_DT1,
               CLM_TXN_PK AS CLM_TXN_PK1,
               CLM_CVG_PK AS CLM_CVG_PK1,
               RESERVE_TYPE_CD AS RESERVE_TYPE_CD1,
               PMT_ISSU_DT AS PMT_ISSU_DT1,
               NK_RESERVE_ID AS NK_RESERVE_ID1,
               BULK_PYMT_IND AS BULK_PYMT_IND1,
               POL_NUM AS POL_NUM1,
               CO_CD AS CO_CD1
          FROM exp_loss_fields2
         WHERE BULK_PYMT_IND = 'Y'
       ),
       RTR_BULK_PYMT_PROCESSING_DEFAULT1 as (
        SELECT --RTR_BULK_PYMT_PROCESSING_BULK_PYMTS.source_reference_id,
               ISO_TYPE_OF_LOSS AS ISO_TYPE_OF_LOSS2,
               BATCH_START_DT AS BATCH_START_DT2,
               BATCH_END_DT AS BATCH_END_DT2,
               RPRTG_PERIOD_START_DT AS RPRTG_PERIOD_START_DT2,
               RPRTG_PERIOD_END_DT AS RPRTG_PERIOD_END_DT2,
               ISO_NONBUR_TRANS_TYPE_CD AS ISO_NONBUR_TRANS_TYPE_CD2,
               ISO_NONBUR_ACCTG_DATE AS ISO_NONBUR_ACCTG_DATE2,
               ISO_NONBUR_ACCDNT_ST_CD AS ISO_NONBUR_ACCDNT_ST_CD2,
               ISO_NONBUR_LOSS_DATE AS ISO_NONBUR_LOSS_DATE2,
               CLAIM_NBR AS CLAIM_NBR2,
               CLAIMANT_NBR AS CLAIMANT_NBR2,
               REPORTING_PERIOD AS REPORTING_PERIOD2,
               ISO_NONBUR_CLAIM_COUNT AS ISO_NONBUR_CLAIM_COUNT2,
               TRANS_AMT AS TRANS_AMT2,
               CREATED_DT AS CREATED_DT2,
               CLM_TXN_PK AS CLM_TXN_PK2,
               CLM_CVG_PK AS CLM_CVG_PK2,
               RESERVE_TYPE_CD AS RESERVE_TYPE_CD2,
               PMT_ISSU_DT AS PMT_ISSU_DT2,
               NK_RESERVE_ID AS NK_RESERVE_ID2,
               BULK_PYMT_IND AS BULK_PYMT_IND2,
               POL_NUM AS POL_NUM2,
               CO_CD AS CO_CD2,
               LKP_SUBM_PREM_ASSOCIATION.SUBM_UNIT_COV_ID,
               LKP_SUBM_PREM_ASSOCIATION.SUBM_VERS_CTL_ID
          FROM exp_loss_fields2
       --  WHERE NOT BULK_PYMT_IND = 'Y'
          left join -- writting query for lookup function
 (
                select SUBM_UNIT_COV_ID,
                       SUBM_VERS_CTL_ID,
                       CLAIM_NUM,
                       NK_RESERVE_ID,
                       row_number() over(partition by CLAIM_NUM, NK_RESERVE_ID order by CLAIM_NUM, NK_RESERVE_ID) as rn -- Please review the order by columns

                  FROM RRM.T_SUBM_PREM_ASSOCIATION qualify rn = 1
               ) LKP_SUBM_PREM_ASSOCIATION
            on LKP_SUBM_PREM_ASSOCIATION.CLAIM_NUM=temp_reusable_cte.CLAIM_NBR
           AND LKP_SUBM_PREM_ASSOCIATION.NK_RESERVE_ID=temp_reusable_cte.NK_RESERVE_ID
       )
     --  select * from RTR_BULK_PYMT_PROCESSING_DEFAULT1
       ,  
AGG_BULK_PYMTS as (
        -- writting query for Aggregator function
 SELECT POL_NUM1 AS POL_NUM,
               CREATED_DT1 AS CREATED_DT,
               source_reference_id,
               TRANS_AMT1 AS TRANS_AMT,
               BATCH_START_DT1 AS BATCH_START_DT,
               BATCH_END_DT1 AS BATCH_END_DT,
               RPRTG_PERIOD_START_DT1 AS RPRTG_PERIOD_START_DT,
               RPRTG_PERIOD_END_DT1 AS RPRTG_PERIOD_END_DT,
               ISO_NONBUR_TRANS_TYPE_CD1 AS ISO_NONBUR_TRANS_TYPE_CD,
               ISO_NONBUR_ACCTG_DATE1 AS ISO_NONBUR_ACCTG_DATE,
               CO_CD1 AS CO_CD,
               ISO_NONBUR_ACCDNT_ST_CD1 AS ISO_NONBUR_ACCDNT_ST_CD,
               ISO_TYPE_OF_LOSS1 AS ISO_TYPE_OF_LOSS,
               SUM(TRANS_AMT) over(partition by BATCH_START_DT, BATCH_END_DT, RPRTG_PERIOD_START_DT, RPRTG_PERIOD_END_DT, ISO_NONBUR_TRANS_TYPE_CD, ISO_NONBUR_ACCTG_DATE, CO_CD, ISO_NONBUR_ACCDNT_ST_CD, ISO_TYPE_OF_LOSS) AS O_TRANS_AMT,
               row_number() Over(partition by BATCH_START_DT, BATCH_END_DT, RPRTG_PERIOD_START_DT, RPRTG_PERIOD_END_DT, ISO_NONBUR_TRANS_TYPE_CD, ISO_NONBUR_ACCTG_DATE, CO_CD, ISO_NONBUR_ACCDNT_ST_CD, ISO_TYPE_OF_LOSS order by POL_NUM desc,CREATED_DT desc) rn
          FROM RTR_BULK_PYMT_PROCESSING_BULK_PYMTS qualify rn=1
       ) ,
exp_loss_fields_bulk_pymts as (
        -- writting query for expression function
SELECT source_reference_id,
               CO_CD,
               O_TRANS_AMT AS TRANS_AMT,
               POL_NUM AS SRCE_SYS_POLICY_NBR,
               BATCH_START_DT,
               BATCH_END_DT,
               RPRTG_PERIOD_START_DT,
               RPRTG_PERIOD_END_DT,
               ISO_NONBUR_TRANS_TYPE_CD,
               ISO_NONBUR_ACCTG_DATE,
               ISO_NONBUR_ACCDNT_ST_CD,
               CREATED_DT,
               LPAD(TO_CHAR(ABS(ROUND(TRANS_AMT,0))),8,'0') AS trans_amt_out1,
               IFF(TRANS_AMT >= 0,'+','-') AS trans_amt_out2,
               '1-999999' AS ISO_NONBUR_QTR_SUBM_ID,
               -1 AS NK_MATRIX_POLICY_ID,
               -1 AS NK_COV_PREM_V_ID,
               -1 AS NK_COV_PREM_V_VERS_CTL_ID,
               -1 AS NK_UNIT_COV_ID,
               -1 AS NK_UNIT_COV_VERS_CTL_ID,
               -1 AS NK_UNIT_COMM_ID,
               -1 AS NK_UNIT_COMM_VERS_CTL_ID,
               -1 AS NK_STAT_VERS_CTL_ID,
               -1 AS NK_STAT_VERS_DATA_MAJ_MIN,
               -1 AS PPA_COV_LEVEL_ID,
               'NE' AS SRCE_SYS_CD,
               'ISO_NONBUR' AS BUREAU_CD,
               'ISO_NONBUR_QTR' AS RPRT_CD,
               'Y' AS CURRENT_ROW_ID,       TO_DATE('9999-12-31', 'YYYY-MM-DD')         AS ROW_PROCESS_DT,       TO_DATE('9999-12-31', 'YYYY-MM-DD')         AS ROW_TRANS_EFF_DT,       TO_DATE('9999-12-31', 'YYYY-MM-DD')         AS ROW_TRANS_END_DT,
               'I' AS BATCH_INSERT_OR_UPDATE_IND,       TO_DATE('9999-12-31', 'YYYY-MM-DD')         AS ACCTG_DT_PROCESS_START,
               '9' AS ISO_NONBUR_STAT_PLAN_IND,
               DECODE(CO_CD, 'PRAC', '5870', 'ALN_PRAC', '5870', 'MWAC', '6995', 'ALN_MWAC', '6995') AS ISO_NONBUR_COMP_NBR,
               '1' AS ISO_NONBUR_KIND_OF_RCD_CD,
               TO_CHAR(RPRTG_PERIOD_START_DT, 'MMYYYY') AS ISO_NONBUR_INCEPTION_DATE,
               DECODE(CO_CD, 'PRAC', '06', 'ALN_PRAC', '06', 'MWAC', '28', 'ALN_MWAC', '28') AS ISO_NONBUR_STATE_CD,
               '1' AS ISO_NONBUR_TYPE_OF_BUS_CD,
               '90' AS ISO_NONBUR_TYPE_OF_POL_CD,
               '111101' AS ISO_NONBUR_CLASS_CODE,
               '        BULKROADSIDE' AS ISO_NONBUR_PREM_RECD_IDENT,
               '075' AS ISO_NONBUR_OTC_COV_CD,
               ' ' AS ISO_NONBUR_TYPE_OF_DED_OTC_CD,
               '    ' AS ISO_NONBUR_OTC_DED_AMT,
               '    ' AS ISO_NONBUR_TOW_AND_LAB_LIM,
               '   ' AS ISO_NONBUR_COLL_COV_CD,
               ' ' AS ISO_NONBUR_TYPE_OF_COLL_DED_CD,
               '530' AS ISO_NONBUR_PASP_SUB_LINE_CD,
               '    ' AS ISO_NONBUR_COLL_DED_AMT,
               '0000000{' AS ISO_NONBUR_PD_PREM_AMT,
               '211' AS ISO_NONBUR_ANNUAL_STMT_LOB_CD,
               '08' AS ISO_TYPE_OF_LOSS,
               TO_CHAR(RPRTG_PERIOD_END_DT,'MMDDYYYY') AS ISO_NONBUR_LOSS_DATE,
               '        BULKROADSIDE' AS ISO_NONBUR_LOSS_RECORD_ID,
               'A' AS ISO_NONBUR_CLAIM_COUNT,
               IFF(trans_amt_out2 = '-',SUBSTR(trans_amt_out1,1,7) || DECODE(SUBSTR(trans_amt_out1,8,1),'0','}','1','J','2','K','3','L','4','M','5','N','6','O','7','P','8','Q','9','R','}'), SUBSTR(trans_amt_out1,1,7) || DECODE(SUBSTR(trans_amt_out1,8,1),'0','{','1','A','2','B','3','C','4','D','5','E','6','F','7','G','8','H','9','I','{')) AS ISO_NONBUR_LOSS_AMT,
               -1 AS CLM_TXN_PK,
               -1 AS CLM_CVG_PK
          FROM AGG_BULK_PYMTS
       ) ,

FINAL_SELECT_ISO_NONBUR_LOSS_PPA_COV_PHYS_DMG_GEN_SUB_VALUES_NE_BULK_PMTS AS(
        -- writing query for target definition
SELECT NEXTVAL --(Use the sequence created in snowflake)
 :: INTEGER AS ISO_NONBUR_QTR_BUILD_ID,
               trim(ISO_NONBUR_QTR_SUBM_ID) :: varchar(20) AS ISO_NONBUR_QTR_SUBM_ID,
               NK_MATRIX_POLICY_ID :: INTEGER AS NK_MATRIX_POLICY_ID,
               NK_COV_PREM_V_ID :: INTEGER AS NK_COV_PREM_V_ID,
               NK_COV_PREM_V_VERS_CTL_ID :: INTEGER AS NK_COV_PREM_V_VERS_CTL_ID,
               NK_UNIT_COV_ID :: INTEGER AS NK_UNIT_COV_ID,
               NK_UNIT_COV_VERS_CTL_ID :: INTEGER AS NK_UNIT_COV_VERS_CTL_ID,
               NK_UNIT_COMM_ID :: INTEGER AS NK_UNIT_COMM_ID,
               NK_UNIT_COMM_VERS_CTL_ID :: INTEGER AS NK_UNIT_COMM_VERS_CTL_ID,
               NK_STAT_VERS_CTL_ID :: INTEGER AS NK_STAT_VERS_CTL_ID,
               NK_STAT_VERS_DATA_MAJ_MIN :: INTEGER AS NK_STAT_VERS_DATA_MAJ_MIN,
               PPA_COV_LEVEL_ID :: INTEGER AS PPA_COV_LEVEL_ID,
               trim(SRCE_SYS_CD) :: varchar(10) AS SRCE_SYS_CD,
               trim(SRCE_SYS_POLICY_NBR) :: varchar(25) AS SRCE_SYS_POLICY_NBR,
               trim(BUREAU_CD) :: varchar(10) AS BUREAU_CD,
               trim(RPRT_CD) :: varchar(20) AS RPRT_CD,
               BATCH_START_DT :: DATE AS BATCH_START_DT,
               BATCH_END_DT :: DATE AS BATCH_END_DT,
               RPRTG_PERIOD_START_DT :: DATE AS RPRTG_PERIOD_START_DT,
               RPRTG_PERIOD_END_DT :: DATE AS RPRTG_PERIOD_END_DT,
               trim(CURRENT_ROW_ID) :: varchar(1) AS CURRENT_ROW_ID,
               ROW_PROCESS_DT :: TIMESTAMP AS ROW_PROCESS_DT,
               ROW_TRANS_EFF_DT :: DATE AS ROW_TRANS_EFF_DT,
               ROW_TRANS_END_DT :: DATE AS ROW_TRANS_END_DT,
               trim(BATCH_INSERT_OR_UPDATE_IND) :: varchar(1) AS BATCH_INSERT_OR_UPDATE_IND,
               ACCTG_DT_PROCESS_START :: DATE AS ACCTG_DT_PROCESS_START,
               trim(ISO_NONBUR_STAT_PLAN_IND) :: varchar(1) AS ISO_NONBUR_STAT_PLAN_IND,
               trim(ISO_NONBUR_TRANS_TYPE_CD) :: varchar(1) AS ISO_NONBUR_TRANS_TYPE_CD,
               trim(ISO_NONBUR_COMP_NBR) :: varchar(4) AS ISO_NONBUR_COMP_NBR,
               trim(ISO_NONBUR_KIND_OF_RCD_CD) :: varchar(1) AS ISO_NONBUR_KIND_OF_RCD_CD,
               trim(ISO_NONBUR_ACCTG_DATE) :: varchar(6) AS ISO_NONBUR_ACCTG_DATE,
               trim(ISO_NONBUR_INCEPTION_DATE) :: varchar(6) AS ISO_NONBUR_INCEPTION_DATE,
               trim(ISO_NONBUR_STATE_CD) :: varchar(2) AS ISO_NONBUR_STATE_CD,
               trim(ISO_NONBUR_TYPE_OF_BUS_CD) :: varchar(1) AS ISO_NONBUR_TYPE_OF_BUS_CD,
               trim(ISO_NONBUR_TYPE_OF_POL_CD) :: varchar(2) AS ISO_NONBUR_TYPE_OF_POL_CD,
               trim(ISO_NONBUR_CLASS_CODE) :: varchar(6) AS ISO_NONBUR_CLASS_CODE,
               trim(ISO_NONBUR_PREM_RECD_IDENT) :: varchar(20) AS ISO_NONBUR_PREM_RECD_IDENT,
               trim(ISO_NONBUR_OTC_COV_CD) :: varchar(3) AS ISO_NONBUR_OTC_COV_CD,
               trim(ISO_NONBUR_TYPE_OF_DED_OTC_CD) :: varchar(1) AS ISO_NONBUR_TYPE_OF_DED_OTC_CD,
               trim(ISO_NONBUR_OTC_DED_AMT) :: varchar(4) AS ISO_NONBUR_OTC_DED_AMT,
               trim(ISO_NONBUR_TOW_AND_LAB_LIM) :: varchar(4) AS ISO_NONBUR_TOW_AND_LAB_LIM,
               trim(ISO_NONBUR_COLL_COV_CD) :: varchar(3) AS ISO_NONBUR_COLL_COV_CD,
               trim(ISO_NONBUR_TYPE_OF_COLL_DED_CD) :: varchar(1) AS ISO_NONBUR_TYPE_OF_COLL_DED_CD,
               trim(ISO_NONBUR_PASP_SUB_LINE_CD) :: varchar(3) AS ISO_NONBUR_PASP_SUB_LINE_CD,
               trim(ISO_NONBUR_COLL_DED_AMT) :: varchar(4) AS ISO_NONBUR_COLL_DED_AMT,
               trim(ISO_NONBUR_PD_PREM_AMT) :: varchar(8) AS ISO_NONBUR_PD_PREM_AMT,
               trim(ISO_NONBUR_ANNUAL_STMT_LOB_CD) :: varchar(3) AS ISO_NONBUR_ANNUAL_STMT_LOB_CD,
               trim(ISO_NONBUR_ACCDNT_ST_CD) :: varchar(2) AS ISO_NONBUR_ACCDNT_ST_CD,
               trim(ISO_TYPE_OF_LOSS) :: varchar(2) AS ISO_NONBUR_TYPE_OF_LOSS,
               trim(ISO_NONBUR_LOSS_DATE) :: varchar(8) AS ISO_NONBUR_LOSS_DATE,
               trim(ISO_NONBUR_LOSS_RECORD_ID) :: varchar(20) AS ISO_NONBUR_LOSS_RECORD_ID,
               trim(ISO_NONBUR_CLAIM_COUNT) :: varchar(1) AS ISO_NONBUR_CLAIM_COUNT,
               trim(ISO_NONBUR_LOSS_AMT) :: varchar(8) AS ISO_NONBUR_LOSS_AMT,
               CREATED_DT :: DATE AS CREATED_DT,
               CLM_TXN_PK :: INTEGER AS CLM_TXN_PK,
               CLM_CVG_PK :: INTEGER AS CLM_CVG_PK
          FROM exp_loss_fields_bulk_pymts
       ) SELECT *
  FROM FINAL_SELECT_ISO_NONBUR_LOSS_PPA_COV_PHYS_DMG_GEN_SUB_VALUES_NE_BULK_PMTS
