To connect to Outlook and download attachments using the Microsoft Graph API, you’ll need to follow these steps:

Prerequisites

	1.	Microsoft Azure Account: You’ll need an Azure account to register an application and get the necessary credentials (Client ID, Tenant ID, and Client Secret).
	2.	Python Environment: Ensure you have Python installed and have the necessary libraries installed (requests and msal).

Step 1: Register an Application in Azure AD

	1.	Go to Azure Portal:
	•	Navigate to Azure Portal and sign in.
	2.	Register the App:
	•	Go to Azure Active Directory > App registrations > New registration.
	•	Name your application (e.g., “OutlookAttachmentDownloader”).
	•	Set the Redirect URI to a valid URI (e.g., http://localhost for local testing).
	3.	Create Client Secret:
	•	After registering, go to Certificates & secrets > New client secret.
	•	Note the generated client secret as you’ll need it later.
	4.	API Permissions:
	•	Go to API permissions > Add a permission > Microsoft Graph.
	•	Add the following permissions:
	•	Mail.Read
	•	Files.ReadWrite.All (if you also want to upload files to OneDrive or SharePoint)
	•	Grant admin consent for the added permissions.
	5.	Note the Credentials:
	•	Note down the Client ID, Tenant ID, and Client Secret.

Step 2: Install Required Python Libraries

pip install requests msal

Step 3: Write the Python Script

Below is a Python script that connects to Microsoft Graph API, fetches emails with attachments from the Outlook inbox, and downloads those attachments to a local directory.

import os
import requests
import msal

# Azure AD app registration details
CLIENT_ID = 'your-client-id'
CLIENT_SECRET = 'your-client-secret'
TENANT_ID = 'your-tenant-id'

# Microsoft Graph API endpoint and scope
AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
SCOPES = ["https://graph.microsoft.com/.default"]
GRAPH_API_ENDPOINT = "https://graph.microsoft.com/v1.0"

# Local directory to save attachments
ATTACHMENTS_DIR = 'C:/path/to/save/attachments'

# Initialize MSAL confidential client
app = msal.ConfidentialClientApplication(
    CLIENT_ID,
    authority=AUTHORITY,
    client_credential=CLIENT_SECRET,
)

# Acquire a token
result = app.acquire_token_for_client(scopes=SCOPES)
if "access_token" in result:
    access_token = result['access_token']
else:
    raise Exception("Could not acquire token. Check your client ID, secret, and tenant ID.")

headers = {
    'Authorization': 'Bearer ' + access_token,
    'Content-Type': 'application/json',
}

# Function to get email messages
def get_messages():
    response = requests.get(f"{GRAPH_API_ENDPOINT}/me/mailFolders/inbox/messages", headers=headers)
    response.raise_for_status()
    return response.json()['value']

# Function to download attachments
def download_attachments(message_id):
    response = requests.get(f"{GRAPH_API_ENDPOINT}/me/messages/{message_id}/attachments", headers=headers)
    response.raise_for_status()
    attachments = response.json()['value']

    for attachment in attachments:
        if '@odata.type' in attachment and attachment['@odata.type'] == '#microsoft.graph.fileAttachment':
            file_name = attachment['name']
            content_bytes = attachment['contentBytes']

            file_path = os.path.join(ATTACHMENTS_DIR, file_name)
            with open(file_path, 'wb') as file:
                file.write(content_bytes.encode('latin1'))  # Save file as binary
            print(f"Downloaded {file_name} to {ATTACHMENTS_DIR}")

# Main execution
if __name__ == "__main__":
    messages = get_messages()
    for message in messages:
        if 'hasAttachments' in message and message['hasAttachments']:
            download_attachments(message['id'])

Step 4: Running the Script

	•	Save the script as download_outlook_attachments.py.
	•	Run the script using Python:

python download_outlook_attachments.py



Explanation

	1.	Authentication:
	•	The script uses the msal library to handle authentication with Azure AD using OAuth 2.0. It requests a token using the client credentials flow.
	2.	Fetching Emails:
	•	The script sends a request to the Microsoft Graph API to fetch messages from the inbox (/me/mailFolders/inbox/messages).
	3.	Downloading Attachments:
	•	For each email that has attachments, the script requests the attachment data using the message ID (/me/messages/{message_id}/attachments) and saves each attachment to a specified directory.
	4.	Binary Encoding:
	•	Attachments are base64 encoded by the Graph API, so the script decodes them and writes them as binary files to the specified directory.

Additional Considerations

	•	Error Handling: The script includes basic error handling. For production use, consider adding more robust error checking and retry logic.
	•	Pagination: If you have a large number of emails, the API will paginate results. You may need to implement logic to handle pagination.
	•	Filtering Emails: You can filter the emails by date, subject, or sender by modifying the API request to include query parameters (e.g., $filter, $search).

This script will help you automate the process of downloading attachments from Outlook using the Microsoft Graph API.